import math
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:

    # 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

# Let us list the factors of the first seven triangle numbers:

    # 1 : 1
    # 3 : 1, 3
    # 6 : 1, 2, 3, 6
    # 10 : 1, 2, 5, 10
    # 15 : 1, 3, 5, 15
    # 21 : 1, 3, 7, 21
    # 28 : 1, 2, 4, 7, 14, 28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?



########################################
### HIGHLY DIVISIBLE TRIANGLE NUMBER ###
########################################


def calculate_triangle_number(n):
    total = 1
    for i in range(n, 1, -1):
        total += i
    return total

def number_of_divisors(n):
    divisors = 0
    sqrtn = int(math.sqrt(n))

    for i in range(1, sqrtn + 1):
        if n % i == 0:
            divisors += 2
        if sqrtn * sqrtn == n:
            divisors -= 1
    
    return divisors
 
current_triangle_number = 0
total_divisors = 0
n = 1

while total_divisors < 501:
    current_triangle_number += n
    total_divisors = number_of_divisors(current_triangle_number)
    print(f"Current triangle number: {current_triangle_number} - Number of divisors: {total_divisors}")
    n += 1

print(f"Triangle number with over 500 divisors found: {current_triangle_number} ({total_divisors} total divisors)")







        

